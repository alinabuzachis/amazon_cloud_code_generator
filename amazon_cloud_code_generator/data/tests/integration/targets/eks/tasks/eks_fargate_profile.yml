# Creating dependencies
- name: Create IAM instance role 
  iam_role:
    name: "{{ _resource_prefix }}-fp-role"
    assume_role_policy_document: "{{ lookup('file', 'eks_fargate_profile-policy.json') }}"
    state: present
    create_instance_profile: no
    managed_policies:
      - AmazonEKSFargatePodExecutionRolePolicy
  register: _result_create_iam_role_fp

- name: Pause a few seconds to ensure IAM role is available to next task
  pause:
    seconds: 10

# Test - Try Create Fargate profile in non existent EKS
# - name: Attempt to create fargate profile in non existent eks
#   amazon.cloud.eks_fargate_profile:
#     fargate_profile_name: '{{ eks_fargate_profile_name_a }}'
#     state: present
#     cluster_name: fake_cluster
#     pod_execution_role_arn: "{{ _result_create_iam_role_fp.arn }}"
#     subnets: >-
#       {{_result_create_subnets.results | selectattr('subnet.tags.Name', 'contains',
#       'private') | map(attribute='subnet.id') }}
#     selectors: '{{ selectors }}'
#   register: _result_create_non_existent_cluster
#   ignore_errors: true

# - name: Check that eks_fargate_profile did nothing
#   assert:
#     that:
#       - _result_create_non_existent_cluster is failed

# # Test - Try deleting a non-existent fargate profile
# - name: Delete an as yet non-existent fargate profile
#   amazon.cloud.eks_fargate_profile:
#     fargate_profile_name: fake_profile
#     cluster_name: '{{ eks_cluster_name }}'
#     state: absent
#     pod_execution_role_arn: '{{ _result_create_iam_role_fp.arn }}'
#     subnets: >-
#       {{_result_create_subnets.results | selectattr('subnet.tags.Name', 'contains',
#       'private') | map(attribute='subnet.id') }}
#     selectors: '{{ selectors }}'
#   register: _result_delete_non_existent_fp
#   ignore_errors: true

# - name: Check that eks_fargate_profile did nothing
#   assert:
#     that:
#       - _result_delete_non_existent_fp is not changed

# Test - Try Create Fargate Profile A with wait and public subnet
- name: Try create Fargate Profile with public subnets (expected to fail)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_a }}"
    state: present
    cluster_name: "{{ _result_create_cluster.result[0].identifier }}"
    pod_execution_role_arn: "{{ _result_create_iam_role_fp.arn }}"
    subnets: >-
      {{_result_create_subnets.results | selectattr('subnet.tags.Name', 'contains',
      'public') | map(attribute='subnet.id') }}
    selectors: '{{ selectors }}'
    wait: true
  register: _result_create_fp
  ignore_errors: true

- name: Check that eks_fargate_profile is not created
  assert:
    that:
      - not _result_create_fp.changed
      - _result_create_fp.msg.endswith("provided in Fargate Profile is not a private subnet")

# Create Fargate profile with wait 
- name: Create Fargate Profile with wait (check mode)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_a }}"
    state: present
    cluster_name: "{{ eks_cluster_name }}"
    pod_execution_role_arn: "{{ _result_create_iam_role_fp.arn }}"
    subnets: >-
      {{_result_create_subnets.results|selectattr('subnet.tags.Name', 'contains',
      'private') | map(attribute='subnet.id') }}
    selectors: "{{ selectors }}"
    wait: true
    tags: "{{ tags }}"
  register: _result_create_fp
  ignore_errors: true
  check_mode: true

- name: Check that eks_fargate_profile is changed (check mode)
  assert:
    that:
      - _result_create_fp.changed

- name: Create Fargate Profile with wait
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_a }}"
    state: present
    cluster_name: "{{ eks_cluster_name }}"
    pod_execution_role_arn: "{{ _result_create_iam_role_fp.arn }}"
    subnets: >-
      {{_result_create_subnets.results|selectattr('subnet.tags.Name', 'contains',
      'private') | map(attribute='subnet.id') }}
    selectors: "{{ selectors }}"
    wait: true
    tags: "{{ tags }}"
  register: _result_create_fp
  ignore_errors: true

- name: Check that eks_fargate_profile is created
  assert:
    that:
      - _result_create_fp.changed
      - _result_create_fp.status == "ACTIVE"

- name: Try create same Fargate Profile with wait (idempotency)(check mode)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_a }}"
    state: present
    cluster_name: "{{ eks_cluster_name }}"
    pod_execution_role_arn: "{{ _result_create_iam_role_fp.arn }}"
    subnets: >-
      {{_result_create_subnets.results|selectattr('subnet.tags.Name', 'contains',
      'private') | map(attribute='subnet.id') }}
    selectors: "{{ selectors }}"
    wait: true
    tags: "{{ tags }}"
  register: _result_create_fp
  ignore_errors: true
  check_mode: true

- name: Check that eks_fargate_profile_create is not changed (idempotency)(check mode)
  assert:
    that:
      - not _result_create_fp.changed

- name: Try create same Fargate Profile with wait (idempotency)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_a }}"
    state: present
    cluster_name: "{{ eks_cluster_name }}"
    pod_execution_role_arn: "{{ _result_create_iam_role_fp.arn }}"
    subnets: >-
      {{_result_create_subnets.results|selectattr('subnet.tags.Name', 'contains',
      'private') | map(attribute='subnet.id') }}
    selectors: "{{ selectors }}"
    wait: true
    tags: "{{ tags }}"
  register: _result_create_fp
  ignore_errors: true

- name: Check that eks_fargate_profile_create is not changed (idempotency)
  assert:
    that:
      - not _result_create_fp.changed

# Update tags Fargate Profile
- name: Update tags in Fargate Profile a with wait (check mode)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_a }}"
    state: present
    cluster_name: "{{ eks_cluster_name }}"
    pod_execution_role_arn: "{{ _result_create_iam_role_fp.arn }}"
    subnets: >-
      {{_result_create_subnets.results|selectattr('subnet.tags.Name', 'contains',
      'private') | map(attribute='subnet.id') }}
    selectors: "{{ selectors }}"
    wait: true
    tags:
      env: test
      test: foo
  register: _result_update_tags_fp
  ignore_errors: true
  check_mode: True

- name: Check that eks_fargate_profile_update is changed (check mode)
  assert:
    that:
      - _result_update_tags_fp.changed

- name: Update tags in Fargate Profile a with wait
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_a }}"
    state: present
    cluster_name: "{{ eks_cluster_name }}"
    pod_execution_role_arn: "{{ _result_create_iam_role_fp.arn }}"
    subnets: >-
      {{_result_create_subnets.results | selectattr('subnet.tags.Name', 'contains',
      'private') | map(attribute='subnet.id') }}
    selectors: "{{ selectors }}"
    wait: true
    tags:
      env: test
      test: foo
  register: _result_update_tags_fp
  ignore_errors: true

- name: Check that eks_fargate_profile is changed
  assert:
    that:
      - _result_update_tags_fp.changed

- name: Try update tags again in Fargate Profile a with wait (idempotency)(check mode)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_a }}"
    state: present
    cluster_name: "{{ eks_cluster_name }}"
    pod_execution_role_arn: "{{ _result_create_iam_role_fp.arn }}"
    subnets: >-
      {{_result_create_subnets.results | selectattr('subnet.tags.Name', 'contains',
      'private') | map(attribute='subnet.id') }}
    selectors: "{{ selectors }}"
    wait: true
    tags:
      env: test
      test: foo
  register: _result_update_tags_fp
  ignore_errors: true
  check_mode: True

- name: Check that eks_fargate_profile is not changed (idempotency)(check mode)
  assert:
    that:
      - not _result_update_tags_fp.changed

- name: Try update tags again in Fargate Profile a with wait (idempotency)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_a }}"
    state: present
    cluster_name: "{{ eks_cluster_name }}"
    pod_execution_role_arn: "{{ _result_create_iam_role_fp.arn }}"
    subnets: >-
      {{_result_create_subnets.results|selectattr('subnet.tags.Name', 'contains',
      'private') | map(attribute='subnet.id') }}
    selectors: "{{ selectors }}"
    wait: true
    tags:
      env: test
      test: foo
  register: _result_update_tags_fp
  ignore_errors: true

- name: Check that eks_fargate_profile is not changed (idempotency)
  assert:
    that:
      - not _result_update_tags_fp.changed

# Create Fargate Profile b without wait
- name: Create Fargate Profile b without wait (check mode)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_b }}"
    state: present
    cluster_name: "{{ eks_cluster_name }}"
    pod_execution_role_arn: "{{ _result_create_iam_role_fp.arn }}"
    subnets: >-
      {{_result_create_subnets.results|selectattr('subnet.tags.Name', 'contains',
      'private') | map(attribute='subnet.id') }}
    selectors: "{{ selectors }}"
  register: _result_create_fp
  ignore_errors: true
  check_mode: true

- name: Check that eks_fargate_profile is created (check mode)
  assert:
    that:
      - _result_create_fp.changed

- name: Create Fargate Profile b without wait
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_b }}"
    state: present
    cluster_name: "{{ eks_cluster_name }}"
    pod_execution_role_arn: "{{ _result_create_iam_role_fp.arn }}"
    subnets: >-
      {{_result_create_subnets.results|selectattr('subnet.tags.Name', 'contains',
      'private') | map(attribute='subnet.id') }}
    selectors: "{{ selectors }}"
  register: _result_create_fp
  ignore_errors: true

- name: Check that eks_fargate_profile is created
  assert:
    that:
      - _result_create_fp.changed
      - _result_create_fp.status == "CREATING"

- name: Create Fargate Profile b without wait (idempotency)(check mode)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_b }}"
    state: present
    cluster_name: "{{ eks_cluster_name }}"
    pod_execution_role_arn: "{{ _result_create_iam_role_fp.arn }}"
    subnets: >-
      {{_result_create_subnets.results | selectattr('subnet.tags.Name', 'contains',
      'private') | map(attribute='subnet.id') }}
    selectors: "{{ selectors }}"
  register: _result_create_fp
  ignore_errors: true
  check_mode: true

- name: Check that eks_fargate_profile is not changed (idempotency)(check mode)
  assert:
    that:
      - not _result_create_fp.changed

- name: create Fargate Profile without wait (idempotency)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_b }}"
    state: present
    cluster_name: "{{ eks_cluster_name }}"
    pod_execution_role_arn: "{{ _result_create_iam_role_fp.arn }}"
    subnets: >-
      {{_result_create_subnets.results | selectattr('subnet.tags.Name', 'contains',
      'private') | map(attribute='subnet.id') }}
    selectors: "{{ selectors }}"
  register: _result_create_fp
  ignore_errors: true

- name: Check that eks_fargate_profile is not changed (idempotency)
  assert:
    that:
      - not _result_create_fp.changed

# Delete Fargate Profile A without wait (test check_profiles_status function)
- name: Delete a fargate profile a (check mode)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_a }}"
    cluster_name: "{{ eks_cluster_name }}"
    state: absent
  register: _result_delete_fp
  check_mode: true

- name: Check that eks_fargate_profile a is changed (check mode)
  assert:
    that:
      - _result_delete_fp.changed

- name: delete a fargate profile
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_a }}"
    cluster_name: "{{ eks_cluster_name }}"
    state: absent
  register: _result_delete_fp

- name: Check that eks_fargate_profile is deleted
  assert:
    that:
      - _result_delete_fp.changed

- name: Delete a fargate profile a (idempotency)(check mode)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_a }}"
    cluster_name: "{{ eks_cluster_name }}"
    state: absent
  register: _result_delete_fp
  check_mode: true

- name: Check that eks_fargate_profile did nothing (idempotency)(check mode)
  assert:
    that:
      - not _result_delete_fp.changed

- name: Delete a fargate profile a (idempotency)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_a }}"
    cluster_name: "{{ eks_cluster_name }}"
    state: absent
  register: _result_delete_fp

- name: Check that eks_fargate_profile did nothing (idempotency)
  assert:
    that:
      - not _result_delete_fp.changed

# Delete Fargate Profile b with wait
- name: Delete a fargate profile b (check mode)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_b }}"
    cluster_name: "{{ eks_cluster_name }}"
    state: absent
    wait: true
  register: _result_delete_fp
  check_mode: true

- name: Check that eks_fargate_profile is deleted (check mode)
  assert:
    that:
      - _result_delete_fp.changed

- name: Delete a fargate profile b 
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_b }}"
    cluster_name: "{{ eks_cluster_name }}"
    state: absent
    wait: true
  register: _result_delete_fp

- name: Check that eks_fargate_profile is deleted
  assert:
    that:
      - _result_delete_fp.changed

- name: Delete a fargate profile b (idempotency)(check mode)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_b }}"
    cluster_name: "{{ eks_cluster_name }}"
    state: absent
    wait: true
  register: _result_delete_fp

- name: Check that eks_fargate_profile did nothing (idempotency)(check mode)
  assert:
    that:
      - not _result_delete_fp.changed

- name: Delete a fargate profile b (idempotency)
  amazon.cloud.eks_fargate_profile:
    fargate_profile_name: "{{ eks_fargate_profile_name_b }}"
    cluster_name: "{{ eks_cluster_name }}"
    state: absent
    wait: true
  register: _result_delete_fp

- name: Check that eks_fargate_profile did nothing (idempotency)
  assert:
    that:
      - not _result_delete_fp.changed
