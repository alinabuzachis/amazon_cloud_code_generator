{% include 'header.j2' %}

import json

from ansible_collections.amazon.aws.plugins.module_utils.core import AnsibleAWSModule
from ansible_collections.amazon.cloud.plugins.module_utils.core import CloudControlResource
from ansible_collections.amazon.cloud.plugins.module_utils.core import snake_dict_to_camel_dict
from ansible_collections.amazon.cloud.plugins.module_utils.core import ansible_dict_to_boto3_tag_list


def main():

    argument_spec = dict(
        client_token=dict(type='str', no_log=True),
        state=dict(type='str', choices=['create', 'update', 'delete', 'list', 'describe', 'get'], default='create'),
    )
    {{arguments}}

    required_if = [
        {{ required_if|join(",") }}
    ]

    module = AnsibleAWSModule(argument_spec=argument_spec, required_if=required_if, supports_check_mode=True)
    cloud = CloudControlResource(module)

    type_name = {{resource_type}}

    params = {}
    {{params}}
    # The DesiredState we pass to AWS must be a JSONArray of non-null values
    _params_to_set = {k: v for k, v in params.items() if v is not None}

    # Only if resource is taggable
    if module.params.get("tags", None):
        _params_to_set["tags"] = ansible_dict_to_boto3_tag_list(
            module.params["tags"]
        )

    params_to_set = snake_dict_to_camel_dict(_params_to_set, capitalize_first=True)
    
    desired_state = json.dumps(params_to_set)
    state = module.params.get('state')
    identifier = module.params.get('{{primary_identifier}}')

    results = {"changed": False, "result": []}
    
    if state == "list":
        results["result"] = cloud.list_resources(type_name)
    
    if state in ("describe", "get"):
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "create":
        results["changed"] |= cloud.create_resource(type_name, identifier, desired_state)
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "update":
        # Ignore createOnlyProperties that can be set only during resource creation
        create_only_params = {{create_only_properties}}
        results["changed"] |= cloud.update_resource(type_name, identifier, params_to_set, create_only_params)
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "delete":
        results["changed"] |= cloud.delete_resource(type_name, identifier)

    module.exit_json(**results)


if __name__ == '__main__':
    main()